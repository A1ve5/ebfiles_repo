diff --git a/gpaw/cli/install_data.py b/gpaw/cli/install_data.py
index ec22e9f..bde446a 100755
--- a/gpaw/cli/install_data.py
+++ b/gpaw/cli/install_data.py
@@ -1,11 +1,15 @@
 from __future__ import print_function
 import os
 import fnmatch
-import urllib2
-from StringIO import StringIO
+from io import BytesIO
 import tarfile
 from optparse import OptionParser, OptionGroup
 import re
+try:
+    from urllib2 import urlopen
+    input = raw_input
+except ImportError:
+    from urllib.request import urlopen
 
 
 usage = '%prog [OPTION]\n  or:  %prog [OPTION] INSTALLDIR'
@@ -50,10 +54,10 @@ def main(args):
         'GPAW setup search paths')
     opts, args = p.parse_args(args)
     nargs = len(args)
-    
+
     if opts.source is None:
         opts.source = sources[0][0]
-    
+
     if opts.register and opts.no_register:
         p.error('Conflicting options specified on whether to register '
                 'setup install paths in configuration file.  Try not '
@@ -62,7 +66,7 @@ def main(args):
     # The sg15 file is a tarbomb.  We will later defuse it by untarring
     # into a subdirectory, so we don't leave a ghastly mess on the
     # unsuspecting user's system.
-    
+
     if not opts.tarball:
         if opts.list_all:
             urls = []
@@ -71,7 +75,7 @@ def main(args):
                 urls.extend(urls1)
         else:
             urls = get_urls(opts.source)
-    
+
         def print_urls(urls, marked=None):
             for url in urls:
                 pageurl, fname = url.rsplit('/', 1)
@@ -80,7 +84,7 @@ def main(args):
                 else:
                     marking = '    '
                 print(' %s %s' % (marking, url))
-    
+
         if len(urls) == 0:
             p.error(
                 'For some reason, no files were found. Probably this script '
@@ -88,7 +92,7 @@ def main(args):
                 'solution is found.  Writing e-mails to '
                 'gpaw-developers@lists@listserv.fysik.dtu.dk is also likely'
                 'to help.')
-    
+
         if opts.version:
             matching_urls = [url for url in urls if opts.version in url]
             if len(matching_urls) > 1:
@@ -102,11 +106,11 @@ def main(args):
             url = matching_urls[0]
         else:
             url = urls[0]
-    
+
         print('Available setups and pseudopotentials')
         print_urls(urls, url)
         print()
-        
+
     if nargs == 0:
         print_setups_info(p)
         print()
@@ -118,9 +122,9 @@ def main(args):
         raise SystemExit
     elif len(args) != 1:
         p.error('No more than one DIR expected.  Please try --help.')
-    
+
     targetpath = args[0]
-    
+
     if opts.tarball:
         print('Reading local tarball %s' % opts.tarball)
         targzfile = tarfile.open(opts.tarball)
@@ -128,12 +132,12 @@ def main(args):
     else:
         tarfname = url.rsplit('/', 1)[1]
         print('Selected %s.  Downloading...' % tarfname)
-        response = urllib2.urlopen(url)
-        targzfile = tarfile.open(fileobj=StringIO(response.read()))
-    
+        response = urlopen(url)
+        targzfile = tarfile.open(fileobj=BytesIO(response.read()))
+
     if not os.path.exists(targetpath):
         os.makedirs(targetpath)
-    
+
     assert tarfname.endswith('.tar.gz')
     setup_dirname = tarfname.rsplit('.', 2)[0]  # remove .tar.gz ending
     setup_path = os.path.abspath(os.path.join(targetpath, setup_dirname))
@@ -142,28 +146,27 @@ def main(args):
         if not os.path.isdir(setup_path):
             os.mkdir(setup_path)
         targetpath = os.path.join(targetpath, setup_dirname)
-    
+
     print('Extracting tarball into %s' % targetpath)
     targzfile.extractall(targetpath)
     assert os.path.isdir(setup_path)
     print('Setups installed into %s.' % setup_path)
-    
+
     # Okay, now we have to maybe edit people's rc files.
     rcfiledir = os.path.join(os.environ['HOME'], '.gpaw')
     rcfilepath = os.path.join(rcfiledir, 'rc.py')
-    
+
     # We could do all this by importing the rcfile as well and checking
     # whether things are okay or not.
     rcline = "setup_paths.insert(0, '%s')" % setup_path
-    
+
     # Run interactive mode unless someone specified a flag requiring otherwise
     interactive_mode = not (opts.register or opts.no_register)
-    
+
     register_path = False
-    
+
     if interactive_mode:
-        answer = raw_input('Register this setup path in %s? [y/n] ' %
-                           rcfilepath)
+        answer = input('Register this setup path in %s? [y/n] ' % rcfilepath)
         if answer.lower() in ['y', 'yes']:
             register_path = True
         elif answer.lower() in ['n', 'no']:
@@ -176,7 +179,7 @@ def main(args):
             register_path = True
         else:
             assert opts.no_register
-    
+
     if register_path:
         # First we create the file
         if not os.path.exists(rcfiledir):
@@ -184,7 +187,7 @@ def main(args):
         if not os.path.exists(rcfilepath):
             tmpfd = open(rcfilepath, 'w')  # Just create empty file
             tmpfd.close()
-    
+
         for line in open(rcfilepath):
             if line.startswith(rcline):
                 print('It looks like the path is already registered in %s.'
@@ -198,7 +201,7 @@ def main(args):
             # Need to explicitly flush/close the file so print_setups_info
             # sees the change in rc.py
             rcfd.close()
-    
+
             print_setups_info(p)
     else:
         print('You can manually register the setups by adding the')
@@ -207,19 +210,19 @@ def main(args):
         print(rcline)
         print()
     print('Installation complete.')
-        
-        
+
+
 def get_urls(source):
     if source == 'gpaw':
         page = 'https://wiki.fysik.dtu.dk/gpaw/_sources/setups/setups.txt'
-        response = urllib2.urlopen(page)
+        response = urlopen(page)
         pattern = 'https://wiki.fysik.dtu.dk/gpaw-files/gpaw-setups-*.tar.gz'
-        urls = [line.strip() for line in response
-                if fnmatch.fnmatch(line.strip(), pattern)]
+        lines = (line.strip().decode() for line in response)
+        urls = [line for line in lines if fnmatch.fnmatch(line, pattern)]
         return urls
     elif source == 'sg15':
         page = 'http://fpmd.ucdavis.edu/qso/potentials/sg15_oncv/'
-        response = urllib2.urlopen(page)
+        response = urlopen(page)
         # Extract filename from:
         # <a href="...">sg15_oncv_upf_YYYY-MM-DD.tar.gz</a>
         pattern = r'>(sg15_oncv_upf_\d\d\d\d-\d\d-\d\d\.tar\.gz)</a>'
@@ -230,7 +233,7 @@ def get_urls(source):
     elif source == 'basis':
         page = 'http://dcwww.camd.dtu.dk/~askhl/files/gpaw-lcao-basis-sets/'
         pattern = re.compile('>(gpaw-basis-.+?.tar.gz)</a>')
-        response = urllib2.urlopen(page)
+        response = urlopen(page)
         files = sorted(pattern.findall(response.read()), reverse=True)
         return [page + fname for fname in files]
     elif source == 'test':
@@ -239,7 +242,7 @@ def get_urls(source):
     else:
         raise ValueError('Unknown source: %s' % source)
 
-        
+
 def print_setups_info(p):
     try:
         import gpaw
